plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'eclipse'
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'maven-publish'
}
archivesBaseName = 'hsm-crypto'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
}

version = '1.0.0'
group = 'io.github.alleriawindrunner'

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'junit', name: 'junit', version: '4.12'
}

ext {
    if (!project.hasProperty("ossrhUsername")) {
        ossrhUsername="xxx"
    }

    if (!project.hasProperty("ossrhPassword")) {
        ossrhPassword="xxx"
    }
}
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/test/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }
}
artifacts {
    archives jar
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

jar {
    destinationDir file('dist')
    archiveName project.name + '.jar'

    exclude '**/*.xml'
    exclude '**/*.properties'

    manifest {
        try {
            def repo = grgit.open(currentDir: project.rootDir)
            if (repo != null) {
                def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                def branch = repo.branch.getCurrent().getName()
                def commit = repo.head().getAbbreviatedId(40)

                attributes(["Implementation-Timestamp": date,
                            "Git-Branch"              : branch,
                            "Git-Commit"              : commit
                ])

                logger.info("  Commit : ")
                logger.info("  => date: {}", date)
                logger.info("  => branch: {}", branch)
                logger.info("  => commit: {}", commit)
            }
        } catch (Exception e) {
            logger.warn(' .git not exist, cannot found commit info, e: {}', e)
        }
    } from sourceSets.main.output

    doLast {
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from file('tools/')
            into 'dist/tools/'
        }
    }
}

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            artifactId project.name
            groupId project.group
            version project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'hsm-crypto'
                description = 'a java library of hardware secure module'
                url = 'https://github.com/AlleriaWindrunner/hsm-crypto.git'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'AlleriaWindrunner'
                        name = 'AlleriaWindrunner'
                        email = 'eleven.hm@vip.163.com'
                    }
                }
                scm {
                    connection = 'https://github.com/AlleriaWindrunner/hsm-crypto.git'
                    url = 'https://github.com/AlleriaWindrunner/hsm-crypto.git'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoURL = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoURL = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = !version.endsWith("SNAPSHOT") ? releasesRepoURL : snapshotsRepoURL

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

clean {
    delete 'dist'
    delete 'build'
    delete 'bin'
}
